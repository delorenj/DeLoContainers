# Table of Contents
- requirements.txt
- compose.yml
- Dockerfile
- audiojangler.py

## File: requirements.txt

- Extension: .txt
- Language: plaintext
- Size: 24 bytes
- Created: 2025-06-16 07:34:57
- Modified: 2025-06-16 07:34:57

### Code

```plaintext
click
pydantic
moviepy


```

## File: compose.yml

- Extension: .yml
- Language: yaml
- Size: 2882 bytes
- Created: 2025-06-16 07:33:31
- Modified: 2025-06-16 07:33:31

### Code

```yaml
services:
  audiojangler.py:
    build:
      context: . # Use the Dockerfile in the current directory (stacks/media/audiojangler.py)
    volumes:
      - ./data/input:/app/input # Map host's ./data/input to container's /app/input
      - ./data/output:/app/output # Map host's ./data/output to container's /app/output
    # The entrypoint is defined in the Dockerfile.
    # Command arguments for audiojangler.py.py should be provided when running the service,
    # for example:
    # docker-compose run --rm audiojangler.py --input-video-path /app/input/your_video.mp4 --output-audio-path /app/output/your_audio.mp3
    #
    # Or, to see the help message:
    # docker-compose run --rm audiojangler.py --help
    #
    # The '--rm' flag is recommended for one-off tasks to clean up the container after it exits.
    #
    # The audiojangler.py.py script expects paths relative to the container's /app directory.
    # For example, for a video file 'sample.mp4' placed in './data/input/' on the host,
    # the input path for the script would be '/app/input/sample.mp4'.
    # Similarly, if the output is specified as '/app/output/audio.mp3',
    # the resulting 'audio.mp3' will appear in './data/output/' on the host.
    #
    # To make it easier to run, you can define specific tasks in a Makefile or script,
    # or use environment variables in the command if your script supports them.
    # For now, the command is expected to be fully specified at runtime.
    #
    # If you wanted to run a default command (e.g., processing a fixed file name),
    # you could add a 'command' directive here, like:
    # command: ["--input-video-path", "/app/input/default_video.mp4", "--output-audio-path", "/app/output/default_audio.mp3"]
    # However, for a utility script, runtime arguments are more flexible.
    # The Dockerfile already provides CMD ["--help"] as a default if no command is given.
    #
    # Note on user permissions:
    # If the script writes files to the output volume, these files will be owned by root
    # inside the container (or the user the container runs as). This might lead to
    # permission issues on the host if the host user is different.
    # Solutions include running the container with a specific user ID (user: "${UID}:${GID}")
    # or changing ownership of the files after they are created. This setup does not
    # currently address that, which is a common consideration for Docker volume mounts.

    # Example of setting user to current host user to avoid permission issues on output files:
    # user: "${UID:-1000}:${GID:-1000}" # Defaults to 1000 if UID/GID are not set in environment
    # This requires UID and GID to be available as environment variables when running compose.
    # e.g., UID=$(id -u) GID=$(id -g) docker-compose run ...
    # For simplicity, this is commented out but is a good practice for real-world use.

```

## File: Dockerfile

- Extension: 
- Language: unknown
- Size: 777 bytes
- Created: 2025-06-16 07:34:36
- Modified: 2025-06-16 07:34:36

### Code

```unknown
# Start from a Python base image
FROM python:3.10-slim

# Set the working directory in the container
WORKDIR /app

# Install ffmpeg and other system dependencies required by moviepy
# libsm6 and libxext6 are often needed for OpenCV, which moviepy can use indirectly
RUN apt-get update && \
  apt-get install -y ffmpeg libsm6 libxext6 && \
  rm -rf /var/lib/apt/lists/*

# Copy the requirements file into the container
COPY requirements.txt .

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application script into the container
COPY audiojangler.py .

# Define the entrypoint for the container
ENTRYPOINT ["python", "audiojangler.py"]

# Default command (can be overridden) - provides help message if no args given
CMD ["--help"]


```

## File: audiojangler.py

- Extension: .py
- Language: python
- Size: 1273 bytes
- Created: 2025-06-16 07:31:38
- Modified: 2025-06-16 07:31:38

### Code

```python
import click
from moviepy.editor import VideoFileClip


@click.command()
@click.option(
    "--input_video_path",
    type=click.Path(exists=True, dir_okay=False, readable=True),
    required=True,
    help="Path to the input video file.",
)
@click.option(
    "--output_audio_path",
    type=click.Path(writable=True, dir_okay=False),
    required=True,
    help="Path to save the extracted MP3 audio file.",
)
def extract_audio(input_video_path: str, output_audio_path: str):
    """
    Extracts audio from a video file and saves it as an MP3 file.
    """
    print(f"Starting audio extraction from '{input_video_path}'")
    try:
        video_clip = VideoFileClip(input_video_path)
        audio_clip = video_clip.audio

        if audio_clip is None:
            print(f"Error: No audio track found in '{input_video_path}'")
            return

        print(f"Extracting audio to '{output_audio_path}'")
        audio_clip.write_audiofile(output_audio_path)

        video_clip.close()
        if hasattr(audio_clip, "close"):  # Check if audio_clip has a close method
            audio_clip.close()

        print("Audio extraction successful!")

    except Exception as e:
        print(f"An error occurred: {e}")


if __name__ == "__main__":
    extract_audio()

```

