services:
  redis:
    container_name: redis
    image: redis:latest
    ports:
      # Internal: Always 6379
      # External: Configurable
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./redis:/usr/local/etc/redis
    environment:
      - REDIS_PASSWORD=${DEFAULT_PASSWORD}
        # This gets propagated to the redis-server command
        # So NOT configurable
      - REDIS_PORT=6379
    restart: always
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.redis.rule=Host(`redis.delo.sh`)"
      - "traefik.http.routers.redis.entrypoints=websecure"
      - "traefik.http.routers.redis.tls.certresolver=letsencrypt"
      - "traefik.http.services.redis.loadbalancer.server.port=6379"
      - "traefik.docker.network=proxy"

  qdrant:
    container_name: qdrant
    image: qdrant/qdrant
    ports:
      - "6333:6333" # REST API
      - "6334:6334" # GRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.delo.sh`)"
      - "traefik.http.routers.qdrant.entrypoints=websecure"
      - "traefik.http.routers.qdrant.tls.certresolver=letsencrypt"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"
      - "traefik.docker.network=proxy"
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}

#  neo4j:
#    image: neo4j:latest
#    networks:
#      - proxy
#    volumes:
#      - neo4j_data:/data
#    environment:
#      - NEO4J_AUTH=${defaultUsername}/${defaultPassword}
#      - NEO4J_PLUGINS=["apoc"]
#      - NEO4J_apoc_export_file_enabled=true
#      - NEO4J_apoc_import_file_enabled=true
#      - NEO4J_apoc_import_file_use__neo4j__config=true
#    restart: unless-stopped

#  postgres:
#    image: postgres:latest
#    restart: unless-stopped
#    ports:
#      - "${POSTGRES_PORT:-5432}:5432"
#    volumes:
#      - ./postgres:/var/lib/postgresql/data
#    environment:
#      POSTGRES_USER: ${defaultUsername}
#     POSTGRES_PASSWORD: ${defaultPassword}
#     POSTGRES_DB: db
#   healthcheck:
#     test: ["CMD-SHELL", "pg_isready -d db -U ${defaultUsername}"]
#     interval: 1s
#     timeout: 5s
#     retries: 10

volumes:
  qdrant_data:
  redis_data:
#  neo4j_data:
#    name: neo4j_data

networks:
  proxy:
    external: true
