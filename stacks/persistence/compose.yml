services:
  # Redis service removed - using external Redis container on network 'proxy'
  # Connection details:
  # - Host: redis (container name on proxy network)
  # - Port: 6379 (standard Redis port)
  # - Password: ${REDIS_PASSWORD} (from .env)
  # - Network: proxy

  qdrant:
    container_name: qdrant
    image: qdrant/qdrant
    ports:
      - "6333:6333" # REST API
      - "6334:6334" # GRPC API
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qdrant.rule=Host(`qdrant.delo.sh`)"
      - "traefik.http.routers.qdrant.entrypoints=websecure"
      - "traefik.http.routers.qdrant.tls.certresolver=letsencrypt"
      - "traefik.http.services.qdrant.loadbalancer.server.port=6333"
      - "traefik.docker.network=proxy"
    environment:
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}

#  neo4j:
#    image: neo4j:latest
#    networks:
#      - proxy
#    volumes:
#      - neo4j_data:/data
#    environment:
#      - NEO4J_AUTH=${defaultUsername}/${defaultPassword}
#      - NEO4J_PLUGINS=["apoc"]
#      - NEO4J_apoc_export_file_enabled=true
#      - NEO4J_apoc_import_file_enabled=true
#      - NEO4J_apoc_import_file_use__neo4j__config=true
#    restart: unless-stopped

  # PostgreSQL service removed - using native PostgreSQL installation
  # Connection details:
  # - Host: host.docker.internal (to access host machine from containers)
  # - Port: ${POSTGRES_PORT:-5432} (from .env, defaults to 5432)
  # - Database: ${POSTGRES_DB} (from .env)
  # - Username: ${POSTGRES_USER} (from .env)
  # - Password: ${POSTGRES_PASSWORD} (from .env)
  #
  # Note: Services needing PostgreSQL should use:
  # extra_hosts:
  #   - "host.docker.internal:host-gateway"
  # And connect to: host.docker.internal:${POSTGRES_PORT:-5432}

volumes:
  qdrant_data:
  # redis_data: removed - using external Redis
#  neo4j_data:
#    name: neo4j_data

networks:
  proxy:
    external: true
