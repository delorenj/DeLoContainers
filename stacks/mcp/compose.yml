services:
  # MCP Admin Dashboard (Simple FastAPI app)
  mcp-admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: mcp-admin-dashboard
    restart: unless-stopped
    environment:
      - ADMIN_API_KEY=${MCP_API_KEY}
      - DATABASE_URL=sqlite:///data/mcp_admin.db
    volumes:
      - mcp_admin_data:/data
      - ./config:/config
    networks:
      - proxy
      - mcp-internal
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-admin.rule=Host(`mcp-admin.delo.sh`)"
      - "traefik.http.routers.mcp-admin.entrypoints=websecure"
      - "traefik.http.routers.mcp-admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.mcp-admin.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy"

  # MCP Proxy Server (Simple FastAPI proxy)
  mcp-proxy:
    build:
      context: ./proxy
      dockerfile: Dockerfile
    container_name: mcp-proxy-server
    restart: unless-stopped
    environment:
      - API_KEY=${MCP_API_KEY}
      - ADMIN_URL=http://mcp-admin-dashboard:8000
    volumes:
      - mcp_proxy_data:/data
      - ./logs:/logs
    networks:
      - proxy
      - mcp-internal
    depends_on:
      - mcp-admin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mcp-api.rule=Host(`mcp.delo.sh`)"
      - "traefik.http.routers.mcp-api.entrypoints=websecure"
      - "traefik.http.routers.mcp-api.tls.certresolver=letsencrypt"
      - "traefik.http.services.mcp-api.loadbalancer.server.port=8001"
      - "traefik.docker.network=proxy"

  # Integrate existing FFmpeg MCP Server
  ffmpeg-mcp:
    image: ffmpeg-mcp-server-ffmpeg-mcp-server:latest
    container_name: mcp-ffmpeg-integrated
    restart: unless-stopped
    environment:
      - MCP_SERVER_NAME=ffmpeg
    volumes:
      - ${HOME}:/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mcp-internal

  # Trello MCP Server (using your existing server)
  trello-mcp:
    image: node:18-alpine
    container_name: mcp-trello
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
      npm install -g http-server &&
      echo '{\"name\": \"trello-mcp\", \"version\": \"1.0.0\", \"main\": \"server.js\", \"dependencies\": {\"@trello/mcp-server\": \"latest\"}}' > package.json &&
      npm install &&
      node -e 'const server = require(\"@trello/mcp-server\"); server.start({port: 8007});'
      "
    environment:
      - MCP_SERVER_NAME=trello
      - MCP_SERVER_PORT=8007
      - TRELLO_BOARD_ID=${TRELLO_BOARD_ID}
      - TRELLO_API_KEY=${TRELLO_API_KEY}
      - TRELLO_TOKEN=${TRELLO_TOKEN}
    volumes:
      - trello_data:/app/data
    networks:
      - mcp-internal

  # GitHub MCP Server (official)
  github-mcp:
    image: ghcr.io/github/github-mcp-server:latest
    container_name: mcp-github
    restart: unless-stopped
    environment:
      - MCP_SERVER_NAME=github
      - MCP_SERVER_PORT=8012
      - GITHUB_PERSONAL_ACCESS_TOKEN=${GITHUB_PERSONAL_ACCESS_TOKEN}
    volumes:
      - github_data:/app/data
    networks:
      - mcp-internal

  # DateTime MCP Server (using uvx)
  mcp-datetime:
    image: python:3.11-slim
    container_name: mcp-datetime
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
      pip install --no-cache-dir uv &&
      uv tool install mcp-datetime &&
      ~/.local/bin/mcp-datetime
      "
    environment:
      - MCP_SERVER_NAME=datetime
      - MCP_SERVER_PORT=8011
    volumes:
      - datetime_data:/app/data
    networks:
      - mcp-internal

  # Context7 MCP Server (using npx)
  context7-mcp:
    image: node:18-alpine
    container_name: mcp-context7
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
      npm install -g @upstash/context7-mcp@latest &&
      npx @upstash/context7-mcp@latest --port 8006
      "
    environment:
      - MCP_SERVER_NAME=context7
      - MCP_SERVER_PORT=8006
    volumes:
      - context7_data:/app/data
    networks:
      - mcp-internal

  # CircleCI MCP Server (using npx)
  circleci-mcp:
    image: node:18-alpine
    container_name: mcp-circleci
    restart: unless-stopped
    working_dir: /app
    command: >
      sh -c "
      npm install -g @circleci/mcp-server-circleci@latest &&
      npx @circleci/mcp-server-circleci --port 8008
      "
    environment:
      - MCP_SERVER_NAME=circleci
      - MCP_SERVER_PORT=8008
      - CIRCLECI_TOKEN=${CIRCLECI_TOKEN}
    volumes:
      - circleci_data:/app/data
    networks:
      - mcp-internal

volumes:
  mcp_admin_data:
  mcp_proxy_data:
  trello_data:
  github_data:
  datetime_data:
  context7_data:
  circleci_data:

networks:
  proxy:
    name: proxy
    external: true
  mcp-internal:
    driver: bridge
