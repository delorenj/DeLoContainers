# Project: DeLoContainers

A personal collection of containers running in the DeLoNET infrastructure.

## Project Guidelines

1. Each containerized service shall have a corresponding README.md that keeps detailed notes on updates and configurations at a high level.
3. If you deem it necessary to deviate from the current goal, please consult with me first.
4. After your task is complete, upsert the `session/progress.md` progress tracker following the strict rules set in the progressTrackerRules.md
5. If you are dealing with a topic that you are not 100% confident about, you are to immediately seek outside resources using the MCP tools you have available.
6. If you deem necessary, you may request permission to create a tool or script that will make your work easier. I am here to help you succeed and streamline your workflow.
7. When faced with a decision as to which container image to pull, always favor linuxserver images over others. They are well-maintained and have a strong community behind them.
8. ASK ME FOR HELP OFTEN! It's ok, i'd love to help!
9. When you fail to make progress after a few consecutive attempts, take a step back and reassess your path. Don't be afraid to ask me for assistance or guidance! This is a team effort! Pair coding is fun and efficient!


## Infrastructure Documentation
**Environment: Home Infrastructure (DeLoHome)**

## System Architecture Overview
Infrastructure hosted on Ubuntu 24.10
Root Path: /home/delorenj/code/DeLoContainers

## Stack Organization
```
├── stacks/
│   ├── ai/         # AI and ML services
│   ├── media/      # Media management and streaming
│   └── utils/      # Infrastructure utilities
├── core/           # Core infrastructure components
└── logs/           # Centralized logging
```

## Stack Details

### AI Stack (`/stacks/ai`)
**Purpose**: Machine learning and AI service hosting
- **Vector Database**: Qdrant
- **LLM Management**: LiteLLM
  - Letta
  - n8n
  - FireCrawl
  - langflow
- **Environment**: Configured via `/stacks/ai/.env`

### Media Stack (`/stacks/media`)
**Purpose**: Media acquisition, management, and streaming
- **Core Services**:
  - Jellyfin (Media Server)
  - qBittorrent (Download Management)
  - Prowlarr (Indexer Management)
  - Radarr (Movie Management)
  - Exportarr (Backup Solution)
- **Network Security**:
  - Gluetun VPN Container
  - Custom VPN monitoring service
- **Environment**: Configured via `/stacks/media/.env`
- **Volume Paths**:
  - Downloads: ${DOWNLOAD_PATH}
  - Media: ${VIDEO_PATH}

### Utils Stack (`/stacks/utils`)
**Purpose**: Infrastructure support services
- **Services**:
  - CouchDB (Database)
  - RustDesk (Remote Access)
  - Monitoring Stack
  - Marker Service
  - Syncthing (mainly to sync DeLoDocs across all my devices)
  - Vibe-Box (live transcription service for vibe coding)
- **Environment**: Configured via `/stacks/utils/.env`
