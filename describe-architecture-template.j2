# DeLoContainers - Dynamic Infrastructure Architecture

*Generated from {{ files | length }} files in the codebase*

## Overview

DeLoContainers is a comprehensive Docker-based infrastructure, organized into modular core components and distinct service stacks. This document provides a high-level architectural overview.

## Core Components

The core infrastructure, primarily managed under the `core/` directory, includes essential services like the Traefik reverse proxy. Key configuration files for Traefik are located in `core/traefik/traefik-data/`.

## Service Stacks

Services are organized into logical stacks within the `stacks/` directory. Each subdirectory typically represents a distinct stack (e.g., `ai`, `media`, `utils`).

{% set stack_names = [] %}
{% for file in files %}
  {% if file.path.startswith('stacks/') %}
    {% set parts = file.path.split('/') %}
    {% if parts | length > 1 and parts[1] not in stack_names %}
      {% set _ = stack_names.append(parts[1]) %}
    {% endif %}
  {% endif %}
{% endfor %}

The primary stacks include:
{% for stack_name in stack_names | sort | unique %}
- **{{ stack_name | title }} Stack**: Manages {{ stack_name }}-related services. Key configurations are typically in `stacks/{{ stack_name }}/compose.yml`.
{% endfor %}

## Traefik Dynamic Configuration

Traefik's dynamic configuration, defining routing rules for services, is located in `core/traefik/traefik-data/dynamic/`. These files map hostnames to backend services.

## Network Architecture

Docker networks are defined within the various `compose.yml` files across the `core/` and `stacks/` directories, enabling communication between containers. The `proxy` network is crucial for Traefik integration.

## Service Endpoints

{% set traefik_config = none %}
{% for file in files %}
{% if file.path == 'core/traefik/traefik-data/dynamic/config.yml' %}
{% set traefik_config = file %}
{% endif %}
{% endfor %}

{% if traefik_config %}
Based on Traefik configuration, the following services are accessible:

{% set lines = traefik_config.content.split('\n') %}
{% for line in lines %}
{% if 'Host(' in line %}
- {{ line.split('Host(`')[1].split('`)')[0] if 'Host(`' in line else 'N/A' }}
{% endif %}
{% endfor %}
{% endif %}

## Configuration Summary

{% set core_count = 0 %}
{% set stack_count = 0 %}
{% set docs_count = 0 %}
{% set compose_count = 0 %}

{% for file in files %}
{% if file.path.startswith('core/') %}
{% set core_count = core_count + 1 %}
{% elif file.path.startswith('stacks/') %}
{% set stack_count = stack_count + 1 %}
{% elif file.path.startswith('docs/') %}
{% set docs_count = docs_count + 1 %}
{% endif %}
{% if file.path.endswith('compose.yml') or file.path.endswith('docker-compose.yml') %}
{% set compose_count = compose_count + 1 %}
{% endif %}
{% endfor %}

- **Total Files**: {{ files | length }}
- **Core Components**: {{ core_count }}
- **Stack Services**: {{ stack_count }}
- **Documentation Files**: {{ docs_count }}
- **Compose Files**: {{ compose_count }}

## Adding New Services

To add a new service to this infrastructure:

1. **Create service stack**: Add to appropriate directory in `stacks/`
2. **Configure Traefik routing**: Add new `.yml` file in `core/traefik/traefik-data/dynamic/`
3. **Connect to proxy network**: Ensure service joins the `proxy` network
4. **Update documentation**: Add service details to `docs/service-directory.md`

### Template for New Service

```yaml
# core/traefik/traefik-data/dynamic/new-service.yml
http:
  routers:
    new-service:
      rule: "Host(`new-service.delo.sh`)"
      entryPoints:
        - websecure
      service: new-service
      tls:
        certResolver: letsencrypt

  services:
    new-service:
      loadBalancer:
        servers:
          - url: "http://new-service-container:PORT"
```

---

*This document was automatically generated from the codebase structure using code2prompt and a custom Jinja2 template.*
